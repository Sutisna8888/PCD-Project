# -*- coding: utf-8 -*-
"""Selamat Datang di Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import streamlit as st
import cv2
import numpy as np
from PIL import Image
from io import BytesIO

# Konfigurasi halaman
st.set_page_config(page_title="Photo Adjustment App", page_icon="🖼️", layout="wide")

st.title("🖼️ Aplikasi Adjustment Foto - Pengolahan Citra Digital")
st.markdown("""
Selamat datang di aplikasi pengolahan citra digital berbasis **Python + Streamlit**.
Pilih fitur di bawah ini untuk melakukan berbagai transformasi pada gambar:
- ✨ *Penyesuaian Kontras & Brightness*
- 🧹 *Penghilangan Noise (Median Filtering)*
- ⚫ *Konversi Grayscale*
- 🔍 *Deteksi Tepi (Edge Detection)*
- 📊 *Histogram Equalization*
""")

# Upload gambar
uploaded_file = st.file_uploader("📂 Unggah gambar (jpg, jpeg, png)", type=["jpg", "jpeg", "png"])

# Fungsi utilitas
def download_image(result_img, filename="output.png"):
    buf = BytesIO()
    result_img.save(buf, format="PNG")
    st.download_button("💾 Download Hasil", buf.getvalue(), filename, "image/png")

# Fungsi pengolahan citra
def adjust_contrast_brightness(img, alpha=1.0, beta=0):
    return cv2.convertScaleAbs(img, alpha=alpha, beta=beta)

def median_filter(img, ksize=3):
    return cv2.medianBlur(img, ksize)

def to_grayscale(img):
    return cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)

def edge_detection(img, low_thresh=50, high_thresh=150):
    gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
    edges = cv2.Canny(gray, low_thresh, high_thresh)
    return edges

def histogram_equalization(img):
    gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
    equalized = cv2.equalizeHist(gray)
    return equalized

# Tampilan aplikasi
if uploaded_file is not None:
    image = np.array(Image.open(uploaded_file))
    st.image(image, caption="Gambar Asli", use_column_width=True)
    st.sidebar.header("🛠️ Pilih Jenis Pengolahan")

    tabs = st.tabs([
        "Kontras & Brightness",
        "Hilangkan Noise",
        "Grayscale",
        "Edge Detection",
        "Histogram Equalization"
    ])

    # Tab 1: Kontras & Brightness
    with tabs[0]:
        st.subheader("✨ Penyesuaian Kontras & Brightness")
        alpha = st.slider("Kontras (alpha)", 0.5, 3.0, 1.0, step=0.1)
        beta = st.slider("Brightness (beta)", -100, 100, 0)
        adjusted = adjust_contrast_brightness(image, alpha, beta)
        st.image(adjusted, caption="Hasil Penyesuaian", use_column_width=True)
        download_image(Image.fromarray(adjusted), "adjusted.png")

    # Tab 2: Median Filter
    with tabs[1]:
        st.subheader("🧹 Hilangkan Noise (Median Filter)")
        ksize = st.slider("Ukuran Kernel (ganjil)", 1, 15, 3, step=2)
        filtered = median_filter(image, ksize)
        st.image(filtered, caption="Hasil Median Filtering", use_column_width=True)
        download_image(Image.fromarray(filtered), "filtered.png")

    # Tab 3: Grayscale
    with tabs[2]:
        st.subheader("⚫ Ubah ke Grayscale")
        gray = to_grayscale(image)
        st.image(gray, caption="Hasil Grayscale", use_column_width=True, clamp=True)
        download_image(Image.fromarray(gray), "grayscale.png")

    # Tab 4: Edge Detection
    with tabs[3]:
        st.subheader("🔍 Deteksi Tepi (Canny Edge Detection)")
        low = st.slider("Threshold Bawah", 0, 200, 50)
        high = st.slider("Threshold Atas", 50, 300, 150)
        edges = edge_detection(image, low, high)
        st.image(edges, caption="Hasil Deteksi Tepi", use_column_width=True, clamp=True)
        download_image(Image.fromarray(edges), "edges.png")

    # Tab 5: Histogram Equalization
    with tabs[4]:
        st.subheader("📊 Histogram Equalization (Peningkatan Kontras Otomatis)")
        equalized = histogram_equalization(image)
        st.image(equalized, caption="Hasil Histogram Equalization", use_column_width=True, clamp=True)
        download_image(Image.fromarray(equalized), "equalized.png")

else:
    st.info("📸 Silakan unggah gambar terlebih dahulu untuk memulai pengolahan.")